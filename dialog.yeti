module dialog;

// to use this module, designgridlayout library must be in the classpath
// in the REPL, you must:
// > java -cp designgridlayout-1.9.jar;yeti.jar yeti.lang.compiler.yeti

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;

import net.java.dev.designgridlayout.DesignGridLayout;
import net.java.dev.designgridlayout.Tag;

// Factories for common widgets (with some private helper functions)
//-------------------------------------------------------------------

_actionListener action =
	(class ActionProxy extends ActionListener
		 void actionPerformed(ActionEvent e) action ()
	 end;
	 new ActionProxy());

_indexSelection action is (list?<number> -> ()) -> ~ListSelectionListener =
	(class SelectionProxy extends ListSelectionListener
		 void valueChanged(ListSelectionEvent e)
			 jlist = e#getSource() unsafely_as ~JList;
			 selection = array jlist#getSelectedIndices();
			 action (list selection)
	 end;
	 new SelectionProxy());
/*
_itemSelection action is (list?<'a> -> ()) -> ~ListSelectionListener =
	(class SelectionProxy extends ListSelectionListener
		 void valueChanged(ListSelectionEvent e)
			 jlist = e#getSource() unsafely_as ~JList;
			 selection = list jlist#getSelectedValues();
			 action (selection unsafely_as list<'a>),
	 end;
	 new SelectionProxy());
*/
button text action =
	(b = new JButton();
	 b#setText(text);
	 b#addActionListener(_actionListener action);
	 b);

_textfield option = (f tf is ~JTextField -> () =
	case option of
		Name name: tf#setName(name);
		Columns columns: tf#setColumns(columns);
		_: ();
	esac;f);

textfield text options = 
	(tf = new JTextField();
	 tf#setText(text);
	 for (map _textfield options) (tf |>);
	 tf);

_label option = (f lb is ~JLabel -> () =
	case option of
		Name name: lb#setName(name);
		LabelFor component: lb#setLabelFor(component as ~JComponent);
		_: ();
	esac;f);

label text options =
	(lb = new JLabel();
	 lb#setText(text);
	 for (map _label options) (lb |>);
	 lb);

_checkbox option = (f cb is ~JCheckBox -> () =
	case option of
		Name name: cb#setName(name);
		Selected selected: cb#setSelected(selected);
		_: ();
	esac;f);

checkbox text options =
	(cb = new JCheckBox();
	 cb#setText(text);
	 for (map _checkbox options) (cb |>);
	 cb);

_combobox option = (f cb is ~JComboBox -> () =
	case option of
		Name name: cb#setName(name);
		Values values: cb#setModel(new DefaultComboBoxModel(array values));
		SelectedItem item: cb#setSelectedItem(item);
		SelectedIndex index: cb#setSelectedIndex(index);
		_: ();
	esac;f);

combobox options =
	(cb = new JComboBox();
	 for (map _combobox options) (cb |>);
	 cb);

_listSelectionMode mode =
	case mode of
		Single (): ListSelectionModel#SINGLE_SELECTION;
		Multiple (): ListSelectionModel#MULTIPLE_INTERVAL_SELECTION
	esac;

singleSelection = SelectionMode (Single ());
multiSelection = SelectionMode (Multiple ());
	
_listbox option = (f lb is ~JList -> () =
	case option of
		Name name: lb#setName(name);
		Values values: lb#setListData(array values);
		SelectionMode mode: lb#setSelectionMode(_listSelectionMode mode);
		SelectIndex index: lb#setSelectedIndex(index);
		SelectIndices indices: lb#setSelectedIndices(array indices);
		IndexSelection listener: lb#addListSelectionListener(_indexSelection listener);
//		ItemSelection listener: lb#addListSelectionListener(_itemSelection listener);
		_: ();
	esac;f);

listbox options =
	(lb = new JList();
	 for (map _listbox options) (lb |>);
	 lb);

scrollinglist options =
	(lb = listbox options;
	 new JScrollPane(lb));

_layout layout {lbl, widget} is ~DesignGridLayout -> {lbl is string, widget is ~JComponent} -> () =
	(_ = layout#row()#grid(label lbl [LabelFor widget])#add([widget]));

row lbl widget is string -> ~JComponent -> {lbl is string, widget is ~JComponent} = {lbl, widget};

typedef t_apply = ~JDialog -> ();

close dialog is t_apply = dialog#setVisible(false);

dialog title widgets apply 
	is string -> list?<{lbl is string, widget is ~JComponent}> -> t_apply -> () =
	(dlg = new JDialog(() as ~JFrame, title, true);
	 dlg#setDefaultCloseOperation(JDialog#DISPOSE_ON_CLOSE);
	 // layout all widgets
	 layout = new DesignGridLayout(dlg);
	 for widgets (_layout layout);
	 // add cancel and OK buttons
	 cancel = button "Cancel" \(close dlg);
	 ok = button "OK" \(apply dlg);
	 dlg#getRootPane()#setDefaultButton(ok);
	 _ = layout#row()#bar()#add(cancel, Tag#CANCEL)#add(ok, Tag#OK);
	 dlg#pack();
	 dlg#setVisible(true);
	 ());

import java.io.File;

openbox title extensions is string -> list?<string> -> (Some string | None ()) =
	(chooser = new JFileChooser();
	 chooser#setCurrentDirectory(new File(System#getProperty("user.dir")));
	 chooser#setFileFilter(new FileNameExtensionFilter(strJoin "" extensions, extensions));
	 chooser#setDialogTitle(title);
	 result = chooser#showOpenDialog(() as ~Component);
	 if result == JFileChooser#APPROVE_OPTION then
		 Some chooser#getSelectedFile()#getAbsolutePath()
	 else
		 none
	 fi);
	
{
	button, 
	textfield, 
	label, 
	checkbox, 
	combobox, 
	listbox, 
	scrollinglist, 
	singleSelection, 
	multiSelection, 
	row,
	close, 
	dialog,
	openbox
}

