module sokoban;

//TODO
// 1h	- save/restore game, score, player

// 30'	- how to handle level score when Undo is used?
// 30'	- better details about scores at the end: levels skipped?

// 1h	- save/restore game
// 2h	- improve guiconsole module (generic dialog functions)
// 2h	- ask which level to play from the list

// 1h	- split in several modules: sokologic, sokoui, sokomain and guiconsole
// 1h	- UI to read a level collection file

load sokoio;
load sokologic;
load guiconsole;

import java.awt.event.KeyEvent;

//TODO refactor to have a map of key -> function
keyMoves = [
	KeyEvent#VK_UP:		up,
	KeyEvent#VK_DOWN:	down,
	KeyEvent#VK_LEFT:	left,
	KeyEvent#VK_RIGHT:	right,
	];
setHashDefault keyMoves \id;

title {level, moves, pushes} = 
	"Sokoban - level `\(level)` - \(moves) moves, \(pushes) pushes";
	
eventLoop ui {level, moves} =
	(convert level |> ui.print;
	 score = score level moves;
	 score |> title |> ui.title;
	 if won? level then
		 ui.infoBox "Bravo! Niveau `\(score.level)` fini en \(score.moves) mouvements, dont \(score.pushes) poussees.";
		 Won score;
	 else
		 key = ui.getch ();
		 if key == KeyEvent#VK_ESCAPE then Quit ()
		 elif key == KeyEvent#VK_S then Skip ()
		 elif key == KeyEvent#VK_R then Restart ()
		 elif key == KeyEvent#VK_Z then Undo moves
		 else eventLoop ui (update' level keyMoves.[key] moves) fi
	 fi);

play ui levels moves scores = 
	if empty? levels then
		scores
	else
		level = head levels;
		ui.title level.title;
		ui.size (width level) (height level);
		ui.clear ();
		moves = undo moves;
		level = map (.move) moves |> reverse |> replay level;
		case eventLoop ui {level, moves} of
			Won score: play ui (tail levels) [] ((Won score)::scores);
			Skip (): play ui (tail levels) [] scores;
			Restart (): play ui levels [] scores;
			Undo ms: play ui levels ms scores;
			Quit (): scores;
		esac
	fi;

icons = [
	"#": "wall.gif",
	" ": "floor.gif",
	"@": "player.gif",
	"+": "player.gif",
	".": "goal.gif",
	"$": "box.gif",
	"*": "boxOnGoal.gif"];

score2string score = case score of 
	Won {level, moves, pushes}:  "Niveau `\(level)`: \(moves) M. \(pushes) P.\n"; _: "" esac;
total scores = 
	if empty? score then "" else reverse scores |> map score2string |> fold (^) "" fi;
	
// Main entry point of the game
sokoban input =
	({notice, levels} = readFileLines input |> readLevels;
	 ui = console 40 25 icons;
	 ui.title "Sokoban";
	 ui.infoBox notice;
	 scores = play ui levels [] [];
	 ui.infoBox (total scores);
	 ui.close ());
